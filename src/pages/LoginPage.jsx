import React, { useState } from "react";
// Removed ToastContainer, Toast from react-bootstrap import as we're using a custom approach for style
import { Button, Form, Alert, ToastContainer, Toast } from "react-bootstrap";
import { useNavigate, useLocation } from "react-router-dom";
// ðŸŽ¯ Firestore functions for document operations
import { doc, getDoc, setDoc } from "firebase/firestore";
// ðŸŽ¯ Firebase Auth functions
import { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut } from "firebase/auth";
// ðŸŽ¯ Import your initialized Firebase instances 
import { db } from "../firebase"; // Assuming you have firebase.js in the parent directory
import "../pages/LoginPage.css" // The CSS for @keyframes animation is still REQUIRED here

// Initialize Firebase Auth
const auth = getAuth();

// Inline Styles (Updated to include Toast colors/styles)
const styles = {
Â  loginContainer: {
Â  Â  padding: '30px',
Â  Â  backgroundColor: '#fff',
Â  Â  borderRadius: '12px',
Â  Â  position: 'relative',
Â  },
Â  loginCloseBtn: {
Â  Â  position: 'absolute',
Â  Â  top: '10px',
Â  Â  right: '15px',
Â  Â  fontSize: '28px',
Â  Â  cursor: 'pointer',
Â  Â  color: '#6c757d',
Â  Â  border: 'none',
Â  Â  backgroundColor: 'transparent',
Â  Â  lineHeight: '1',
Â  },
    // Define the colors/backgrounds we will use for the Toast via inline styles
    toastBackgrounds: {
        danger: '#dc3545', // Red for Logout
        success: '#198754', // Green for Signup Success
        info: '#0dcaf0', // Blue for Login Loading
    }
};

export default function AuthPage({ onClose }) {
Â  const navigate = useNavigate();
Â  const location = useLocation();
Â  const from = location.state?.from || "/";

Â  const [isLogin, setIsLogin] = useState(true);
Â  const [name, setName] = useState("");
Â  const [email, setEmail] = useState("");
Â  const [password, setPassword] = useState("");
Â  const [error, setError] = useState(null);
Â  const [userDetails, setUserDetails] = useState(null);

Â  // State for custom Toast/Notification
Â  const [showToast, setShowToast] = useState(false);
Â  const [toastMessage, setToastMessage] = useState("");
Â  const [toastVariant, setToastVariant] = useState("success"); // Holds 'danger', 'success', 'info'

Â  // Function to show a custom toast notification
Â  const displayToast = (message, variant = 'success') => {
Â  Â  setToastMessage(message);
Â  Â  setToastVariant(variant);
Â  Â  setShowToast(true);
Â  };

Â  // Helper function to get the correct background color inline
Â  const getToastBgStyle = () => ({
    backgroundColor: styles.toastBackgrounds[toastVariant] || styles.toastBackgrounds.success,
    color: 'white',
    borderRadius: '8px',
    boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)', // Inline box shadow
    border: 'none',
 });

Â  // ------------------------------------------------------------------
Â  // 1. Fetch user details by Document ID (UID)
Â  // ------------------------------------------------------------------
Â  const fetchUserById = async (userId) => {
Â  Â  try {
Â  Â  Â  const userDocRef = doc(db, "users", userId);
Â  Â  Â  const userSnapshot = await getDoc(userDocRef);

Â  Â  Â  if (!userSnapshot.exists()) {
Â  Â  Â  Â  console.warn(`User profile document not found for UID: ${userId}`);
Â  Â  Â  Â  setError("Profile document missing. Contact support.");
Â  Â  Â  Â  return null;
Â  Â  Â  }

Â  Â  Â  const userData = userSnapshot.data();
Â  Â  Â  const userWithId = {
Â  Â  Â  Â  id: userSnapshot.id, // This is the user's UID
Â  Â  Â  Â  ...userData
Â  Â  Â  };

Â  Â  Â  setUserDetails(userWithId);
Â  Â  Â  return userWithId;

Â  Â  } catch (firebaseError) {
Â  Â  Â  console.error("ðŸ”¥ Error fetching user details from Firestore:", firebaseError);
Â  Â  Â  setError(`Failed to load profile: ${firebaseError.message}`);
Â  Â  Â  return null;
Â  Â  }
Â  };

Â  // ------------------------------------------------------------------
Â  // 3. Handle Logout Action 
Â  // ------------------------------------------------------------------
Â  const handleLogout = async () => {
Â  Â  setError(null);
Â  Â  try {
Â  Â  Â  await signOut(auth); // Sign out the user
Â  Â  Â  setUserDetails(null); // Clear local user state

Â  Â  Â  // âœ… Display custom animated toast notification on success
Â  Â  Â  displayToast("You have been successfully logged out! Redirecting...", "danger");

Â  Â  Â  // Wait for the toast animation/display duration (1500ms) before redirecting/closing
Â  Â  Â  setTimeout(() => {
Â  Â  Â  Â  if (onClose) {
Â  Â  Â  Â  Â  onClose(); // Close modal if used as one
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  navigate("/", { replace: true }); // Navigate to home page
Â  Â  Â  Â  }
Â  Â  Â  }, 1500); 

Â  Â  } catch (logoutError) {
Â  Â  Â  console.error("Firebase Logout Error:", logoutError);
Â  Â  Â  setError("Failed to log out. Please try refreshing the page.");
Â  Â  }
Â  };


Â  // ------------------------------------------------------------------
Â  // 2. Handle Form Submission (Login/Signup)
Â  // ------------------------------------------------------------------
Â  const handleSubmit = async (e) => {
Â  Â  e.preventDefault();
Â  Â  setError(null);
Â  Â  setUserDetails(null);

Â  Â  if (isLogin) {
Â  Â  Â  // ----- LOGIN LOGIC -----
Â  Â  Â  try {
Â  Â  Â  Â  const userCredential = await signInWithEmailAndPassword(auth, email, password);
Â  Â  Â  Â  const userId = userCredential.user.uid;

Â  Â  Â  Â  displayToast(`Login Successful! Fetching profile...`, "info");

Â  Â  Â  Â  const user = await fetchUserById(userId);

Â  Â  Â  Â  if (user) {
Â  Â  Â  Â  Â  setTimeout(() => {
Â  Â  Â  Â  Â  Â  if (onClose) {
Â  Â  Â  Â  Â  Â  Â  onClose();
Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  navigate(from, { replace: true });
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  }, 500); 
Â  Â  Â  Â  }
Â  Â  Â  } catch (authError) {
Â  Â  Â  Â  console.error("Firebase Login Error:", authError.message);
Â  Â  Â  Â  setError(`Login failed: Invalid email or password.`);
Â  Â  Â  }

Â  Â  } else {
Â  Â  Â  // ----- SIGNUP LOGIC -----
Â  Â  Â  try {
Â  Â  Â  Â  const userCredential = await createUserWithEmailAndPassword(auth, email, password);
Â  Â  Â  Â  const userId = userCredential.user.uid;

Â  Â  Â  Â  // Create corresponding profile document in Firestore
Â  Â  Â  Â  await setDoc(doc(db, "users", userId), {
Â  Â  Â  Â  Â  name: name,
Â  Â  Â  Â  Â  email: email,
Â  Â  Â  Â  Â  contactNo: "",
Â  Â  Â  Â  Â  gender: "",
Â  Â  Â  Â  Â  customerID: userId,
Â  Â  Â  Â  Â  profileImage: null,
Â  Â  Â  Â  Â  referredBy: null
Â  Â  Â  Â  });

Â  Â  Â  Â  displayToast(`Signup successful! Welcome ${name}. Please log in.`, "success");

Â  Â  Â  Â  // Switch to login form after a brief delay
Â  Â  Â  Â  setTimeout(() => {
Â  Â  Â  Â  Â  setIsLogin(true);
Â  Â  Â  Â  }, 500);


Â  Â  Â  } catch (authError) {
Â  Â  Â  Â  console.error("Firebase Signup Error:", authError.message);
Â  Â  Â  Â  setError(`Signup failed: ${authError.message.replace('Firebase: ', '')}`);
Â  Â  Â  }
Â  Â  }
Â  };

Â  const toggleForm = () => {
Â  Â  setIsLogin(!isLogin);
Â  Â  setName("");
Â  Â  setEmail("");
Â  Â  setPassword("");
Â  Â  setError(null);
Â  };

Â  const goHome = () => {
Â  Â  navigate("/");
Â  Â  if (onClose) onClose();
Â  };

Â  return (
Â  Â  <>
Â  Â  Â  {/* 1. Full-page wrapper for CSS background/centering (Requires external CSS) */}
Â  Â  Â  <div className="auth-page-wrapper"> 
Â  Â  Â  Â  {/* 2. Inner login box container */}
Â  Â  Â  Â  <div style={styles.loginContainer} className="login-container"> 

Â  Â  Â  Â  Â  {onClose && (
Â  Â  Â  Â  Â  Â  <button style={styles.loginCloseBtn} onClick={onClose} aria-label="Close">
Â  Â  Â  Â  Â  Â  Â  âœ•
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  <h2 className="text-center mb-4">{isLogin ? "Login" : "Signup"}</h2>

Â  Â  Â  Â  Â  {userDetails ? (
Â  Â  Â  Â  Â  Â  // --- Logged In View ---
Â  Â  Â  Â  Â  Â  <div className="text-center">
Â  Â  Â  Â  Â  Â  Â  <div className="mt-3 p-3 border rounded bg-success bg-opacity-10 mb-4">
Â  Â  Â  Â  Â  Â  Â  Â  <h5 className="text-success">You are logged in!</h5>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="mb-1"><strong>Name:</strong> {userDetails.name}</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="mb-1"><strong>Email:</strong> {userDetails.email}</p>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  <Button
Â  Â  Â  Â  Â  Â  Â  Â  variant="danger"
Â  Â  Â  Â  Â  Â  Â  Â  onClick={handleLogout}
Â  Â  Â  Â  Â  Â  Â  Â  className="w-100 mb-3"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <i className="fas fa-sign-out-alt me-2"></i> Log Out
Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  // --- Login/Signup Form View ---
Â  Â  Â  Â  Â  Â  <Form onSubmit={handleSubmit}>

Â  Â  Â  Â  Â  Â  Â  {error && <Alert variant="danger">{error}</Alert>}

Â  Â  Â  Â  Â  Â  Â  {!isLogin && (
Â  Â  Â  Â  Â  Â  Â  Â  <Form.Group className="mb-3" controlId="formName">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <Form.Label>Full Name *</Form.Label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <Form.Control
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Enter full name"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={name}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setName(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  </Form.Group>
Â  Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  Â  <Form.Group className="mb-3" controlId="formEmail">
Â  Â  Â  Â  Â  Â  Â  Â  <Form.Label>Email address *</Form.Label>
Â  Â  Â  Â  Â  Â  Â  Â  <Form.Control
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="email"
Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Enter email"
Â  Â  Â  Â  Â  Â  Â  Â  Â  value={email}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setEmail(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  </Form.Group>

Â  Â  Â  Â  Â  Â  Â  <Form.Group className="mb-3" controlId="formPassword">
Â  Â  Â  Â  Â  Â  Â  Â  <Form.Label>Password *</Form.Label>
Â  Â  Â  Â  Â  Â  Â  Â  <Form.Control
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="password"
Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Password (min 6 characters)"
Â  Â  Â  Â  Â  Â  Â  Â  Â  value={password}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setPassword(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  Â  minLength={6}
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  </Form.Group>

Â  Â  Â  Â  Â  Â  Â  <Button variant="bt btn-warning" type="submit" className="w-100 mb-3">
Â  Â  Â  Â  Â  Â  Â  Â  {isLogin ? "Login" : "Signup"}
Â  Â  Â  Â  Â  Â  Â  </Button>

Â  Â  Â  Â  Â  Â  Â  <div className="text-center mt-2">
Â  Â  Â  Â  Â  Â  Â  Â  <Button variant="link" onClick={toggleForm}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  {isLogin ? "Don't have an account? Signup" : "Already have an account? Login"}
Â  Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </Form>
Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  <div className="text-center mt-3">
Â  Â  Â  Â  Â  Â  <Button variant="secondary" onClick={goHome}>
Â  Â  Â  Â  Â  Â  Â  Home
Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>

Â  Â  Â  {/* 3. Custom Toast/Notification Component */}
Â  Â  Â  <ToastContainer 
           style={{ 
               position: 'fixed', 
               top: 0, 
               right: 0, 
               padding: '1rem',
               zIndex: 1080 
           }} 
       >
Â  Â  Â  Â  <Toast
Â  Â  Â  Â  Â  show={showToast}
Â  Â  Â  Â  Â  onClose={() => setShowToast(false)}
Â  Â  Â  Â  Â  delay={1500} 
Â  Â  Â  Â  Â  autohide
Â  Â  Â  Â  Â  className="fade-in-out" // Animation class must remain external
Â  Â  Â  Â  Â  style={getToastBgStyle()} // âœ… INLINE CSS for background and appearance
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <Toast.Body style={{ fontWeight: 500 }}>
Â  Â  Â  Â  Â  Â  {toastMessage}
Â  Â  Â  Â  Â  </Toast.Body>
Â  Â  Â  Â  </Toast>
Â  Â  Â  </ToastContainer>
Â  Â  </>
Â  );
}